name: Build Test

# Manual workflow trigger only
on:
  workflow_dispatch:
    inputs:
      openwrt_version:
        description: 'OpenWRT version to test'
        required: true
        default: 'both'
        type: choice
        options:
          - 'both'
          - '23.05'
          - '24.10'
      architecture:
        description: 'Target architecture'
        required: true
        default: 'x86_64'
        type: choice
        options:
          - 'x86_64'
          - 'aarch64'
          - 'arm_cortex-a7'
          - 'mipsel_24kc'

# Environment variables
env:
  OPENWRT_23_05_VERSION: "23.05.3"
  OPENWRT_24_10_VERSION: "24.10.0"
  SDK_BASE_URL: "https://downloads.openwrt.org/releases"

jobs:
  build-test:
    name: Build Test - ${{ matrix.openwrt_version }} (${{ matrix.arch }})
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        include:
          # OpenWRT 23.05 builds
          - openwrt_version: "23.05"
            openwrt_full_version: "23.05.3"
            arch: "x86_64"
            target: "x86"
            subtarget: "64"
            sdk_name: "x86-64"
          - openwrt_version: "23.05"
            openwrt_full_version: "23.05.3"
            arch: "aarch64"
            target: "bcm27xx"
            subtarget: "bcm2711"
            sdk_name: "bcm27xx-bcm2711"
          - openwrt_version: "23.05"
            openwrt_full_version: "23.05.3"
            arch: "arm_cortex-a7"
            target: "sunxi"
            subtarget: "cortexa7"
            sdk_name: "sunxi-cortexa7"
          
          # OpenWRT 24.10 builds
          - openwrt_version: "24.10"
            openwrt_full_version: "24.10.0"
            arch: "x86_64"
            target: "x86"
            subtarget: "64"
            sdk_name: "x86-64"
          - openwrt_version: "24.10"
            openwrt_full_version: "24.10.0"
            arch: "aarch64"
            target: "bcm27xx"
            subtarget: "bcm2711"
            sdk_name: "bcm27xx-bcm2711"
          - openwrt_version: "24.10"
            openwrt_full_version: "24.10.0"
            arch: "arm_cortex-a7"
            target: "sunxi"
            subtarget: "cortexa7"
            sdk_name: "sunxi-cortexa7"
        
        # Note: Matrix filtering is handled in the job logic below

    steps:
      - name: Check matrix compatibility
        run: |
          # Check if this matrix combination should be built
          if [ "${{ github.event.inputs.openwrt_version }}" != "both" ] && [ "${{ github.event.inputs.openwrt_version }}" != "${{ matrix.openwrt_version }}" ]; then
            echo "Skipping build: OpenWRT version mismatch (requested: ${{ github.event.inputs.openwrt_version }}, matrix: ${{ matrix.openwrt_version }})"
            exit 0
          fi
          
          if [ "${{ github.event.inputs.architecture }}" != "x86_64" ] && [ "${{ github.event.inputs.architecture }}" != "aarch64" ] && [ "${{ github.event.inputs.architecture }}" != "arm_cortex-a7" ] && [ "${{ github.event.inputs.architecture }}" != "${{ matrix.arch }}" ]; then
            echo "Skipping build: Architecture mismatch (requested: ${{ github.event.inputs.architecture }}, matrix: ${{ matrix.arch }})"
            exit 0
          fi
          
          echo "Proceeding with build for OpenWRT ${{ matrix.openwrt_version }} (${{ matrix.arch }})"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup build environment
        run: |
          # Install required packages for Ubuntu
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            clang \
            flex \
            bison \
            g++ \
            gawk \
            gcc-multilib \
            g++-multilib \
            gettext \
            git \
            libncurses5-dev \
            libssl-dev \
            python3-setuptools \
            rsync \
            swig \
            unzip \
            zlib1g-dev \
            file \
            wget \
            time

      - name: Download OpenWRT SDK
        run: |
          echo "Downloading OpenWRT ${{ matrix.openwrt_version }} SDK for ${{ matrix.arch }}..."
          
          # Construct SDK URL
          SDK_URL="${SDK_BASE_URL}/${{ matrix.openwrt_full_version }}/targets/${{ matrix.target }}/${{ matrix.subtarget }}/openwrt-sdk-${{ matrix.sdk_name }}-generic_gcc-12.3.0_musl.Linux-x86_64.tar.xz"
          
          echo "SDK URL: $SDK_URL"
          
          # Download and extract SDK
          wget -q "$SDK_URL" -O openwrt-sdk.tar.xz
          
          if [ ! -f openwrt-sdk.tar.xz ]; then
            echo "Failed to download SDK from $SDK_URL"
            exit 1
          fi
          
          # Extract SDK
          tar -xf openwrt-sdk.tar.xz
          ls -la
          
          # Find SDK directory
          SDK_DIR=$(find . -maxdepth 1 -name "openwrt-sdk-*" -type d | head -1)
          if [ -z "$SDK_DIR" ]; then
            echo "Failed to find SDK directory"
            exit 1
          fi
          
          echo "SDK_DIR=$SDK_DIR" >> $GITHUB_ENV
          echo "Found SDK directory: $SDK_DIR"

      - name: Setup SDK environment
        run: |
          cd $SDK_DIR
          
          # Update feeds
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          
          # Configure for minimal build
          cat > .config << EOF
          CONFIG_TARGET_${{ matrix.target }}=y
          CONFIG_TARGET_${{ matrix.target }}_${{ matrix.subtarget }}=y
          CONFIG_TARGET_${{ matrix.target }}_${{ matrix.subtarget }}_DEVICE_generic=y
          CONFIG_HAS_SUBTARGETS=y
          CONFIG_HAS_DEVICES=y
          CONFIG_TARGET_BOARD="${{ matrix.target }}"
          CONFIG_TARGET_SUBTARGET="${{ matrix.subtarget }}"
          CONFIG_TARGET_PROFILE="generic"
          CONFIG_TARGET_ARCH_PACKAGES=""
          CONFIG_DEFAULT_TARGET_OPTIMIZATION="-Os -pipe -mcpu=${{ matrix.arch }}"
          CONFIG_TARGET_OPTIMIZATION="-Os -pipe -mcpu=${{ matrix.arch }}"
          CONFIG_LIBC="musl"
          CONFIG_LIBC_VERSION="1.2.4"
          CONFIG_TARGET_SUFFIX="generic"
          CONFIG_USE_SSTRIP=y
          CONFIG_STRIP_ARGS="--strip-all"
          CONFIG_USE_MKLIBS=y
          CONFIG_PACKAGE_libgpiod=y
          CONFIG_PACKAGE_libjson-c=y
          CONFIG_PACKAGE_libpthread=y
          EOF
          
          # Make defconfig
          make defconfig

      - name: Copy package source
        run: |
          cd $SDK_DIR
          
          # Create package directory
          mkdir -p package/gpio-fan-rpm
          
          # Copy package files
          cp -r $GITHUB_WORKSPACE/* package/gpio-fan-rpm/
          
          # Show package structure
          echo "Package structure:"
          find package/gpio-fan-rpm -type f -name "*.c" -o -name "*.h" -o -name "Makefile" -o -name "Kconfig" | sort

      - name: Build package
        run: |
          cd $SDK_DIR
          
          echo "Building gpio-fan-rpm package for OpenWRT ${{ matrix.openwrt_version }} (${{ matrix.arch }})..."
          
          # Build the package with verbose output for comprehensive testing
          make package/gpio-fan-rpm/compile V=s

      - name: Run package checks
        run: |
          cd $SDK_DIR
          
          echo "Running additional package checks..."
          
          # Check package dependencies
          if [ -f bin/packages/*/base/gpio-fan-rpm_*.ipk ]; then
            echo "Package dependency analysis:"
            tar -tzf bin/packages/*/base/gpio-fan-rpm_*.ipk | grep -E "(control|data)" | head -20
            
            echo "Package size analysis:"
            du -h bin/packages/*/base/gpio-fan-rpm_*.ipk
            
            echo "Package contents:"
            tar -tzf bin/packages/*/base/gpio-fan-rpm_*.ipk | grep -v "^$" | wc -l | xargs echo "Total files:"
          fi
          
          # Check if build was successful
          if [ $? -eq 0 ]; then
            echo "✅ Build successful!"
            
            # List generated packages
            echo "Generated packages:"
            find bin/packages -name "*gpio-fan-rpm*" -type f
            
            # Show package info
            if [ -f bin/packages/*/base/gpio-fan-rpm_*.ipk ]; then
              echo "Package details:"
              tar -tzf bin/packages/*/base/gpio-fan-rpm_*.ipk | head -10
            fi
          else
            echo "❌ Build failed!"
            exit 1
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: gpio-fan-rpm-${{ matrix.openwrt_version }}-${{ matrix.arch }}
          path: |
            ${{ env.SDK_DIR }}/bin/packages/*/base/gpio-fan-rpm_*.ipk
            ${{ env.SDK_DIR }}/bin/packages/*/base/Packages*
          retention-days: 30

      - name: Build summary
        if: always()
        run: |
          echo "## Build Summary for OpenWRT ${{ matrix.openwrt_version }} (${{ matrix.arch }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f $SDK_DIR/bin/packages/*/base/gpio-fan-rpm_*.ipk ]; then
            echo "✅ **Build Status**: SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Generated Package**: " >> $GITHUB_STEP_SUMMARY
            ls -la $SDK_DIR/bin/packages/*/base/gpio-fan-rpm_*.ipk >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Package Size**: " >> $GITHUB_STEP_SUMMARY
            du -h $SDK_DIR/bin/packages/*/base/gpio-fan-rpm_*.ipk >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build Status**: FAILED" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "No package was generated." >> $GITHUB_STEP_SUMMARY
          fi 